#!/usr/bin/env python

import PySimpleGUI27 as sg
import json
import sys
import linuxcnc
import hal
import threading
from transitions import Machine, State
from os.path import expanduser

# Constants

STATE_WAITING = "STATE_WAITING"
STATE_IDLE = "STATE_IDLE"
STATE_LOAD_INIT = "STATE_LOAD_INIT"
STATE_LOAD_MOVE_LOADING = "STATE_LOAD_MOVE_LOADING"
STATE_LOAD_AT_LOADING = "STATE_LOAD_AT_LOADING"
STATE_LOAD_TOUCHOFF = "STATE_LOAD_TOUCHOFF"
STATE_LOAD_RETRACT = "STATE_LOAD_RETRACT"
STATE_UNLOAD_INIT = "STATE_UNLOAD_INIT"
STATE_UNLOAD_MOVE_LOADING = "STATE_UNLOAD_MOVE_LOADING"
STATE_UNLOAD_AT_LOADING = "STATE_UNLOAD_AT_LOADING"
STATE_UNLOAD_MOVE_SAFE = "STATE_UNLOAD_MOVE_SAFE"
STATE_UNLOAD_FLUSH = "STATE_UNLOAD_FLUSH"
STATE_ATC_INIT = "STATE_ATC_INIT"
STATE_RETURN_MOVE_SAFE_INITIAL = "STATE_RETURN_MOVE_SAFE_INITIAL"
STATE_RETURN_MOVE_CLEARANCE = "STATE_RETURN_MOVE_CLEARANCE"
STATE_RETURN_MOVE_CLOSE = "STATE_RETURN_MOVE_CLOSE"
STATE_RETURN_MOVE_POCKET = "STATE_RETURN_MOVE_POCKET"
STATE_RETURN_LOITER_POCKET = "STATE_RETURN_LOITER_POCKET"
STATE_RETURN_MOVE_SIDE = "STATE_RETURN_MOVE_SIDE"
STATE_RETURN_MOVE_SAFE_FINAL = "STATE_RETURN_MOVE_SAFE_FINAL"
STATE_RETURN_FINAL = "STATE_RETURN_FINAL"
STATE_RETRIEVE_MOVE_SAFE_INITIAL = "STATE_RETRIEVE_MOVE_SAFE_INITIAL"
STATE_RETRIEVE_FLUSH = "STATE_RETRIEVE_FLUSH"
STATE_RETRIEVE_MOVE_SIDE = "STATE_RETRIEVE_MOVE_SIDE"
STATE_RETRIEVE_MOVE_POCKET = "STATE_RETRIEVE_MOVE_POCKET"
STATE_RETRIEVE_LOITER_POCKET = "STATE_RETRIEVE_LOITER_POCKET"
STATE_RETRIEVE_MOVE_CLOSE = "STATE_RETRIEVE_MOVE_CLOSE"
STATE_RETRIEVE_MOVE_CLEARANCE = "STATE_RETRIEVE_MOVE_CLEARANCE"
STATE_RETRIEVE_MOVE_SAFE_FINAL = "STATE_RETRIEVE_MOVE_SAFE_FINAL"
STATE_RETRIEVE_FINAL = "STATE_RETRIEVE_FINAL"

EVENT_NOT_READY= "EVENT_NOT_READY"
EVENT_READY = "EVENT_READY"
EVENT_REQUEST_LOAD = "EVENT_REQUEST_LOAD"
EVENT_REQUEST_UNLOAD = "EVENT_REQUEST_UNLOAD"
EVENT_REQUEST_ATC = "EVENT_REQUEST_ATC"
EVENT_REQUEST_CONTINUE = "EVENT_REQUEST_CONTINUE"
EVENT_REQUEST_CANCEL = "EVENT_REQUEST_CANCEL"
EVENT_NEEDS_RETURN = "EVENT_NEEDS_RETURN"
EVENT_NEEDS_RETRIEVE = "EVENT_NEEDS_RETRIEVE"
EVENT_LOAD_OK = "EVENT_LOAD_OK"
EVENT_UNLOAD_OK = "EVENT_UNLOAD_OK"
EVENT_RETRIEVE_OK = "EVENT_RETRIEVE_OK"
EVENT_IN_POSITION = "EVENT_IN_POSITION"
EVENT_TOUCHOFF_TOUCHED = "EVENT_TOUCHOFF_TOUCHED"
EVENT_LOITER_COMPLETE = "EVENT_LOITER_COMPLETE"
EVENT_FLUSH_COMPLETE = "EVENT_FLUSH_COMPLETE"
EVENT_CONTINUE_ATC = "EVENT_CONTINUE_ATC"
EVENT_CONTINUE_UNLOAD = "EVENT_CONTINUE_UNLOAD"
EVENT_CONTINUE_LOAD = "EVENT_CONTINUE_LOAD"
EVENT_LOAD_COMPLETE = "EVENT_LOAD_COMPLETE"
EVENT_ATC_COMPLETE = "EVENT_ATC_COMPLETE"

def panic():
    """Panic by logging fatal error and exiting"""
    print "hal_fixed_atc_touchoff encountered a fatal error. Stopping."
    sys.exit(1)

# Config
config = None
try:
    with open(expanduser('~/hal_fixed_atc_touchoff_config.json')) as config_file:
        config = json.load(config_file)
except Exception as ex:
    print "Couldn't find config file at ~/hal_fixed_atc_touchoff_config.json"
    sys.exit(1)

def merge_coords(coords):
    """Merge and validate coordinate dicts from config"""
    base = {}
    for coord in coords:
        base.update(coord)
    # Validate
    if not (getattr(base, 'x', None) and getattr(base, 'y', None) and getattr(base, 'z', None)):
        raise AttributeError
    return base

def add_coords(a_coord, b_coord):
    """Perform a + b on coordinates, where a is fully-formed"""
    return {
        "x": a_coord.x + getattr(b_coord, 'x', 0),
        "y": a_coord.y + getattr(b_coord, 'y', 0),
        "z": a_coord.z + getattr(b_coord, 'z', 0)
    }

def get_pocket_coord(number, coord_type):
    """Get {x,y,z} coordinate tuple for a given pocket and coordinate type"""
    pocket = config.pockets[str(number)]
    if not pocket:
        raise ValueError

    base = merge_coords([config.pocket_default, pocket])

    if coord_type == 'pocket':
        return base
    if coord_type == 'side':
        return add_coords(base, config.pocket_side_offset)
    if coord_type == 'above-close':
        return add_coords(base, {'z': config.pocket_above_close_offset_z})
    if coord_type == 'above-clearance':
        return add_coords(base, {'z': config.pocket_above_clearance_offset_z})
    raise ValueError

class StateMachine(object):
    """Finite state machine for ATC and touchoff"""

    states = [
        State(STATE_WAITING, on_enter=['reset'], on_exit=None),
        State(STATE_IDLE, on_enter=['reset', 'restore_modal_state'], on_exit=['save_modal_state']),

        State(STATE_LOAD_INIT, on_enter=['at_load_init'], on_exit=None),
        State(STATE_LOAD_MOVE_LOADING, on_enter=['move_loading'], on_exit=None),
        State(STATE_LOAD_AT_LOADING, on_enter=['open_continue_window'], on_exit=None),
        State(STATE_LOAD_TOUCHOFF, on_enter=['assume_loaded', 'touchoff'], on_exit=None),
        State(STATE_LOAD_RETRACT, on_enter=['update_current_tool_length_offset', 'move_retract'], on_exit=None),

        State(STATE_UNLOAD_INIT, on_enter=['at_unload_init'], on_exit=None),
        State(STATE_UNLOAD_MOVE_LOADING, on_enter=['move_loading'], on_exit=None),
        State(STATE_UNLOAD_AT_LOADING, on_enter=None, on_exit=None), # noop
        State(STATE_UNLOAD_MOVE_SAFE, on_enter=['assume_unloaded', 'move_safe'], on_exit=None),
        State(STATE_UNLOAD_FLUSH, on_enter=['flush_chuck'], on_exit=None),

        State(STATE_ATC_INIT, on_enter=['at_atc_init'], on_exit=None),

        State(STATE_RETURN_MOVE_SAFE_INITIAL, on_enter=['move_safe'], on_exit=None),
        State(STATE_RETURN_MOVE_SIDE, on_enter=['move_pocket_side'], on_exit=None),
        State(STATE_RETURN_MOVE_POCKET, on_enter=['move_pocket'], on_exit=None),
        State(STATE_RETURN_LOITER_POCKET, on_enter=['open_chuck', 'loiter'], on_exit=None),
        State(STATE_RETURN_MOVE_CLOSE, on_enter=['move_pocket_above_close'], on_exit=None),
        State(STATE_RETURN_MOVE_CLEARANCE, on_enter=['close_chuck', 'move_pocket_above_clearance'], on_exit=None),
        State(STATE_RETURN_MOVE_SAFE_FINAL, on_enter=['move_safe'], on_exit=None),
        State(STATE_RETURN_FINAL, on_enter=['at_return_final'], on_exit=None),

        State(STATE_RETRIEVE_MOVE_SAFE_INITIAL, on_enter=['move_safe'], on_exit=None),
        State(STATE_RETRIEVE_FLUSH, on_enter=['flush_chuck'], on_exit=None),
        State(STATE_RETRIEVE_MOVE_CLEARANCE, on_enter=['move_pocket_clearance'], on_exit=None),
        State(STATE_RETRIEVE_MOVE_CLOSE, on_enter=['move_pocket_close'], on_exit=None),
        State(STATE_RETRIEVE_MOVE_POCKET, on_enter=['open_chuck', 'move_pocket'], on_exit=None),
        State(STATE_RETRIEVE_LOITER_POCKET, on_enter=['loiter'], on_exit=None),
        State(STATE_RETRIEVE_MOVE_SIDE, on_enter=['close_chuck', 'move_pocket_side'], on_exit=None),
        State(STATE_RETRIEVE_MOVE_SAFE_FINAL, on_enter=['move_safe'], on_exit=None),
        State(STATE_RETRIEVE_FINAL, on_enter=['at_retrieve_final'], on_exit=None)
    ]

    transitions = [
        # The state machine should "restart" to STATE_WAITING if MDI becomes unavailable.
        {'trigger': EVENT_NOT_READY, 'source': '*', 'dest': STATE_WAITING},
        # When MDI is ready, go to STATE_IDLE.
        {'trigger': EVENT_READY, 'source': STATE_WAITING, 'dest': STATE_IDLE},

        # Load and Touchoff
        {'trigger': EVENT_REQUEST_LOAD, 'source': STATE_IDLE, 'dest': STATE_LOAD_INIT},
        {'trigger': EVENT_NEEDS_RETURN, 'source': STATE_LOAD_INIT, 'dest': STATE_RETURN_MOVE_SAFE_INITIAL},
        {'trigger': EVENT_NEEDS_RETRIEVE, 'source': STATE_LOAD_INIT, 'dest': STATE_RETRIEVE_MOVE_SAFE_INITIAL},
        {'trigger': EVENT_LOAD_OK, 'source': STATE_LOAD_INIT, 'dest': STATE_LOAD_MOVE_LOADING},
        {'trigger': EVENT_IN_POSITION, 'source': STATE_LOAD_MOVE_LOADING, 'dest': STATE_LOAD_AT_LOADING},
        {'trigger': EVENT_REQUEST_CONTINUE, 'source': STATE_LOAD_AT_LOADING, 'dest': STATE_LOAD_TOUCHOFF},
        {'trigger': EVENT_REQUEST_CANCEL, 'source': STATE_LOAD_AT_LOADING, 'dest': STATE_IDLE},
        {'trigger': EVENT_TOUCHOFF_TOUCHED, 'source': STATE_LOAD_TOUCHOFF, 'dest': STATE_LOAD_RETRACT},
        {'trigger': EVENT_IN_POSITION, 'source': STATE_LOAD_RETRACT, 'dest': STATE_RETURN_MOVE_SAFE_FINAL},

        # Unload
        {'trigger': EVENT_REQUEST_UNLOAD, 'source': STATE_IDLE, 'dest': STATE_UNLOAD_INIT},
        {'trigger': EVENT_NEEDS_RETURN, 'source': STATE_UNLOAD_INIT, 'dest': STATE_RETURN_MOVE_SAFE_INITIAL},
        {'trigger': EVENT_NEEDS_RETRIEVE, 'source': STATE_UNLOAD_INIT, 'dest': STATE_RETRIEVE_MOVE_SAFE_INITIAL},
        {'trigger': EVENT_UNLOAD_OK, 'source': STATE_UNLOAD_INIT, 'dest': STATE_UNLOAD_MOVE_LOADING},
        {'trigger': EVENT_IN_POSITION, 'source': STATE_UNLOAD_MOVE_LOADING, 'dest': STATE_UNLOAD_AT_LOADING},
        {'trigger': EVENT_REQUEST_CONTINUE, 'source': STATE_UNLOAD_AT_LOADING, 'dest': STATE_UNLOAD_MOVE_SAFE},
        {'trigger': EVENT_IN_POSITION, 'source': STATE_UNLOAD_MOVE_SAFE, 'dest': STATE_UNLOAD_FLUSH},
        {'trigger': EVENT_FLUSH_COMPLETE, 'source': STATE_UNLOAD_FLUSH, 'dest': STATE_IDLE},

        # General ATC
        {'trigger': EVENT_REQUEST_ATC, 'source': STATE_IDLE, 'dest': STATE_ATC_INIT},

        # ATC Return
        {'trigger': EVENT_NEEDS_RETURN, 'source': STATE_ATC_INIT, 'dest': STATE_RETURN_MOVE_SAFE_INITIAL},
        {'trigger': EVENT_IN_POSITION, 'source': STATE_RETURN_MOVE_SAFE_INITIAL, 'dest': STATE_RETURN_MOVE_CLEARANCE},
        {'trigger': EVENT_IN_POSITION, 'source': STATE_RETURN_MOVE_CLEARANCE, 'dest': STATE_RETURN_MOVE_CLOSE},
        {'trigger': EVENT_IN_POSITION, 'source': STATE_RETURN_MOVE_CLOSE, 'dest': STATE_RETURN_MOVE_POCKET},
        {'trigger': EVENT_IN_POSITION, 'source': STATE_RETURN_MOVE_POCKET, 'dest': STATE_RETURN_LOITER_POCKET},
        {'trigger': EVENT_LOITER_COMPLETE, 'source': STATE_RETURN_LOITER_POCKET, 'dest': STATE_RETURN_MOVE_SIDE},
        {'trigger': EVENT_IN_POSITION, 'source': STATE_RETURN_MOVE_SIDE, 'dest': STATE_RETURN_FINAL},
        {'trigger': EVENT_CONTINUE_ATC, 'source': STATE_RETURN_FINAL, 'dest': STATE_RETRIEVE_MOVE_SAFE_INITIAL},
        {'trigger': EVENT_LOAD_COMPLETE, 'source': STATE_RETURN_FINAL, 'dest': STATE_IDLE},
        {'trigger': EVENT_CONTINUE_UNLOAD, 'source': STATE_RETURN_FINAL, 'dest': STATE_UNLOAD_INIT},
        {'trigger': EVENT_CONTINUE_LOAD, 'source': STATE_RETURN_FINAL, 'dest': STATE_LOAD_INIT},

        # ATC Retrieval
        {'trigger': EVENT_RETRIEVE_OK, 'source': STATE_ATC_INIT, 'dest': STATE_RETRIEVE_MOVE_SAFE_INITIAL},
        {'trigger': EVENT_IN_POSITION, 'source': STATE_RETRIEVE_MOVE_SAFE_INITIAL, 'dest': STATE_RETRIEVE_FLUSH},
        {'trigger': EVENT_FLUSH_COMPLETE, 'source': STATE_RETRIEVE_FLUSH, 'dest': STATE_RETRIEVE_MOVE_SIDE},
        {'trigger': EVENT_IN_POSITION, 'source': STATE_RETRIEVE_MOVE_SIDE, 'dest': STATE_RETRIEVE_MOVE_POCKET},
        {'trigger': EVENT_IN_POSITION, 'source': STATE_RETRIEVE_MOVE_POCKET, 'dest': STATE_RETRIEVE_LOITER_POCKET},
        {'trigger': EVENT_LOITER_COMPLETE, 'source': STATE_RETRIEVE_LOITER_POCKET, 'dest': STATE_RETRIEVE_MOVE_CLOSE},
        {'trigger': EVENT_IN_POSITION, 'source': STATE_RETRIEVE_MOVE_CLOSE, 'dest': STATE_RETRIEVE_MOVE_CLEARANCE},
        {'trigger': EVENT_IN_POSITION, 'source': STATE_RETRIEVE_MOVE_CLEARANCE, 'dest': STATE_RETRIEVE_MOVE_SAFE_FINAL},
        {'trigger': EVENT_IN_POSITION, 'source': STATE_RETRIEVE_MOVE_SAFE_FINAL, 'dest': STATE_RETRIEVE_FINAL},
        {'trigger': EVENT_ATC_COMPLETE, 'source': STATE_RETRIEVE_FINAL, 'dest': STATE_IDLE},
        {'trigger': EVENT_CONTINUE_UNLOAD, 'source': STATE_RETRIEVE_FINAL, 'dest': STATE_UNLOAD_INIT},
        {'trigger': EVENT_CONTINUE_LOAD, 'source': STATE_RETRIEVE_FINAL, 'dest': STATE_LOAD_INIT},
    ]

    # Attributes
    tool_linuxcnc = None # None or tool #
    tool_changing = None # None (not currently executing tool change) or tool #
    tool_loadunload = None # None (not currently executing load/unload) or tool #
    tool_actual = None # None (no tool in spindle) or tool # (possible tool could not be in spindle if retrieved for load)
    loadunload_mode = None # None, 'load', 'unload'
    tool_table = [] # List of tuples TODO is it a list or tuple?
    actual_position = {'x': 0, 'y': 0, 'z': 0} # coord map
    is_ok_for_mdi = False # Boolean
    is_spindle_on = False # Boolean
    is_modal_state_saved = False # Boolean
    # HAL I/O:
    is_touching = False # Pin input
    is_chuck_open = False # Pin output
    is_changed = False # Pin output

    def __init__(self):
        """Initialize the state machine"""
        self.machine = Machine(
            model=self,
            queued=True,
            states=StateMachine.states,
            transitions=StateMachine.transitions,
            initial=STATE_WAITING
        )

    def reset(self):
        self.tool_linuxcnc = None
        self.tool_changing = None
        self.tool_loadunload = None
        self.loadunload_mode = None
        self.is_touching = False
        self.close_chuck()
        self.is_changed = False

    def at_loadunload_init(self):
        if not self.tool_actual:
            # no tool loaded, attempt to retrieve
            self.machine.dispatch(EVENT_NEEDS_RETRIEVE)
        elif self.tool_actual != self.tool_loadunload:
            # loaded tool doesn't match requested, return it first
            self.machine.dispatch(EVENT_NEEDS_RETURN)
        elif self.loadunload_mode == 'load':
            # loaded tool matches requested, good to go
            self.machine.dispatch(EVENT_LOAD_OK)
        elif self.loadunload_mode == 'unload':
            # loaded tool matches requested, good to go
            self.machine.dispatch(EVENT_UNLOAD_OK)
        else:
            panic()

    def at_load_init(self):
        self.loadunload_mode = 'load'
        self.at_loadunload_init()

    def at_unload_init(self):
        self.loadunload_mode = 'unload'
        self.at_loadunload_init()

    def assume_loaded(self):
        self.tool_actual = self.tool_loadunload

    def assume_unloaded(self):
        self.tool_actual = None

    def at_atc_init(self):
        if self.tool_actual:
            # a tool is loaded, return it first
            self.machine.dispatch(EVENT_NEEDS_RETURN)
        else:
            # no tool loaded, proceed to retrieve requested tool
            self.machine.dispatch(EVENT_RETRIEVE_OK)

    def at_return_final(self):
        previous = self.tool_actual

        if not previous:
            panic()
        elif self.tool_changing and not self.loadunload_mode and not self.tool_loadunload:
            # this is atc
            self.tool_actual = None
            self.machine.dispatch(EVENT_CONTINUE_ATC)
        elif not self.tool_changing and self.loadunload_mode and self.tool_loadunload:
            # this is load/unload
            if self.loadunload_mode == 'load' and previous == self.tool_loadunload:
                # putting new tool back after successful load / touchoff
                self.tool_actual = None
                self.machine.dispatch(EVENT_LOAD_COMPLETE)
            elif self.loadunload_mode == 'load' and previous != self.tool_loadunload:
                # load setup
                self.tool_actual = None
                self.machine.dispatch(EVENT_CONTINUE_LOAD)
            elif self.loadunload_mode == 'unload' and previous != self.tool_loadunload:
                # unload setup
                self.tool_actual = None
                self.machine.dispatch(EVENT_CONTINUE_UNLOAD)
            else:
                panic()
        else:
            panic()

    def at_retrieve_final(self):
        if self.tool_actual:
            panic()
        elif self.tool_changing and not self.loadunload_mode and not self.tool_loadunload:
            # atc is complete
            self.tool_actual = self.tool_changing
            self.is_changed = True
            self.machine.dispatch(EVENT_ATC_COMPLETE)
            # TODO will is_changed be picked up by HAL? I don't think so.
            # Perhaps EVENT_ATC_COMPLETE should be dispatched in
            # set_tool_change. Alternatively, make a new state that is in charge
            # of waiting for linuxcnc acknowledgement
        elif not self.tool_changing and self.loadunload_mode and self.tool_loadunload:
            # load setup
            self.tool_actual = self.tool_loadunload
            if self.loadunload_mode == 'load':
                self.machine.dispatch(EVENT_CONTINUE_LOAD)
            else:
                self.machine.dispatch(EVENT_CONTINUE_UNLOAD)
        else:
            panic()

    def open_continue_window(self):
        continue_layout = [[sg.Text('Click start to start the tool setting procedure.')],
                           [sg.Text('THE ALLIGATOR CLIP MUST BE ATTACHED TO THE TOOL')],
                           [sg.Button('Start'), sg.Button('Cancel')]]
        continue_window = sg.Window('Tool Setter', layout).Finalize()
        event, values = continue_window.Read(timeout=None)
        if event == 'Start':
            self.machine.dispatch(EVENT_REQUEST_CONTINUE)
        else:
            self.machine.dispatch(EVENT_REQUEST_CANCEL)

    def save_modal_state(self):
        self.is_modal_state_saved = True
        send_gcode('M70')

    def restore_modal_state(self):
        """M72 restore modal state (if saved), and [effectful] G43 tool length compensation"""
        if self.is_modal_state_saved:
            send_gcode('M72')
            self.is_modal_state_saved = False

            # G43 (tool length compensation) if a tool is currently loaded
            if self.tool_actual:
                send_gcode('G43 H{}'.format(self.tool_actual))

    def request_load_tool(self, tool):
        self.tool_loadunload = tool
        self.machine.dispatch(EVENT_REQUEST_LOAD)

    def request_unload_tool(self, tool):
        self.tool_loadunload = tool
        self.machine.dispatch(EVENT_REQUEST_UNLOAD)

    def set_tool_change(self, is_tool_change, number, changed):
        # Derive
        tool_changing = None
        if is_tool_change and number and not changed:
            tool_changing = number

        # If changed...
        if tool_changing != self.tool_changing:
            self.tool_changing = tool_changing
            if self.tool_changing:
                self.machine.dispatch(EVENT_REQUEST_ATC)
            else:
                pass
                # TODO ? Could possibly dispatch a end-of-atc type of event

    def set_is_touching(self, is_touching):
        if is_touching != self.is_touching:
            self.is_touching = is_touching
            if self.is_touching:
                self.machine.dispatch(EVENT_TOUCHOFF_TOUCHED)

    def set_tool_linuxcnc(self, tool):
        self.tool_linuxcnc = tool

    def set_tool_table(self, tool_table):
        self.tool_table = tool_table

    def update_current_tool_length_offset(self):
        length_offset = self.actual_position.z + config.touchoff_length_compensation_offset
        send_gcode("G10 L1 P{} Z{}".format(self.tool_actual, length_offset))

    def set_actual_position(self, actual_position):
        self.actual_position = actual_position

    def set_is_ok_for_mdi(self, is_ok_for_mdi):
        # If changed...
        if is_ok_for_mdi != self.is_ok_for_mdi:
            self.is_ok_for_mdi = is_ok_for_mdi
            # Dispatch appropriate event
            if self.is_ok_for_mdi:
                self.machine.dispatch(EVENT_READY)
            else:
                print "ERROR: Not ready for MDI"
                self.machine.dispatch(EVENT_NOT_READY)

    def set_is_spindle_on(self, is_spindle_on):
        self.is_spindle_on = is_spindle_on

    def open_chuck(self):
        self.is_chuck_open = True

    def close_chuck(self):
        self.is_chuck_open = False

    def flush_chuck(self):
        """Open chuck and dispatch EVENT_FLUSH_COMPLETE after config.loiter_seconds"""
        self.open_chuck()
        def chuck_timer_cb():
            self.close_chuck()
            self.machine.dispatch(EVENT_FLUSH_COMPLETE)
        timer = threading.Timer(config.flush_seconds, chuck_timer_cb)
        timer.start()

    def loiter(self):
        """Dispatch EVENT_LOITER_COMPLETE after config.loiter_seconds"""
        def loiter_timer_cb():
            self.machine.dispatch(EVENT_LOITER_COMPLETE)
        timer = threading.Timer(config.loiter_seconds, loiter_timer_cb)
        timer.start()

    def move_coord_absolute(self, coord, feed=3600, dispatch_in_position=True, no_z=False):
        # TODO avoid tool rack boundary
        gcode_base = "G21 G53 G0 F{} X{} Y{}".format(feed, coord.x, coord.y)
        gcode_final = gcode_base if no_z else (gcode_base + " Z{}".format(coord.z))
        send_gcode(gcode_final)
        if dispatch_in_position:
            self.machine.dispatch(EVENT_IN_POSITION)

    def move_coord_relative(self, coord, feed=3600, dispatch_in_position=True):
        # TODO avoid tool rack boundary
        send_gcode("G21 G91 G0 F{} X{} Y{} Z{}".format(feed, coord.x, coord.y, coord.z))
        if dispatch_in_position:
            self.machine.dispatch(EVENT_IN_POSITION)

    def move_loading(self):
        """Move to loading position (XYZ)"""
        self.move_coord_absolute(config.loading)

    def move_loading_xy(self):
        """Move to loading position (XY), maintaining current Z, and no EVENT_IN_POSITION"""
        self.move_coord_absolute(config.loading, dispatch_in_position=False, no_z=True)

    def touchoff(self):
        self.move_loading_xy()

        coord = {"x": 0, "y": 0, "z": config.touchoff_step_z}

        def touchoff_loop():
            while True:
                # check if beyond touchoff limit
                if self.actual_position.z < config.touchoff_limit_z:
                    print "ERROR: Too low! Stopping before crash, if it hasn't already happened."
                    panic()
                # break if touching, or already touched
                if self.machine.state != STATE_LOAD_TOUCHOFF or self.is_touching:
                    break
                self.move_coord_relative(coord)
        t = threading.Thread(target=touchoff_loop)
        t.start()

    def move_retract(self):
        coord = {"x": 0, "y": 0, "z": config.touchoff_retract_offset_z}
        self.move_coord_relative(coord)

    def move_safe(self):
        self.move_coord_absolute(config.safe)

    def move_pocket_side(self):
        coord = get_pocket_coord(self.tool_changing, 'side')
        self.move_coord_absolute(coord)

    def move_pocket(self):
        coord = get_pocket_coord(self.tool_changing, 'pocket')
        self.move_coord_absolute(coord)

    def move_pocket_above_close(self):
        coord = get_pocket_coord(self.tool_changing, 'above-close')
        self.move_coord_absolute(coord)

    def move_pocket_above_clearance(self):
        coord = get_pocket_coord(self.tool_changing, 'above-clearance')
        self.move_coord_absolute(coord)

# Configure HAL Component
h = hal.component("hal_fixed_atc_touchoff")
# IN:
h.newpin("number", hal.HAL_FLOAT, hal.HAL_IN)
h.newpin("tool_prepare", hal.HAL_BIT, hal.HAL_IN)  # looped to `prepared`
h.newpin("tool_change", hal.HAL_BIT, hal.HAL_IN)
h.newpin("touchoff", hal.HAL_BIT, hal.HAL_IN)
# OUT:
h.newpin("prepared", hal.HAL_BIT, hal.HAL_OUT)  # looped to `tool_prepare`
h.newpin("changed", hal.HAL_BIT, hal.HAL_OUT)
h.newpin("chuck", hal.HAL_BIT, hal.HAL_OUT)
h.ready()

# Configure GUI window
layout = [[sg.Text('Tool # = Pocket #')],
          [sg.Text('Load/Touch off Tool #'), sg.InputText(key='InputLoad',
                                                      size=(3, 1), do_not_clear=False), sg.Button('Load')],
          [sg.Text('Unload Tool #'), sg.InputText(key='InputUnload',
                                                  size=(3, 1), do_not_clear=False), sg.Button('Unload')],
          # output for stdout/stderr
          [sg.Output(size=(50, 10))]]
window = sg.Window('Tool Changer and Touch-Off', layout).Finalize()

def send_gcode(gcode):
    """G-code sender"""
    c = linuxcnc.command()
    c.mode(linuxcnc.MODE_MDI)
    c.wait_complete()
    # TODO does this block? if yes, remove wait_complete below. if no, increase wait time
    c.mdi(gcode)
    c.wait_complete()

def status_routine(state, status):
    """Status routine (for main loop)"""

    # Poll status channel
    try:
        status.poll()
    except linuxcnc.error as ex:
        print ex
        panic()

    # Read status into state
    state.set_tool_linuxcnc(None if status.tool_in_spindle < 1 else status.tool_in_spindle)
    state.set_tool_table(status.tool_table)
    ap = status.actual_position
    state.set_actual_position({'x': ap[0], 'y': ap[1], 'z': ap[2]})
    state.set_is_ok_for_mdi(not status.estop and status.enabled and status.homed and (
        status.interp_state == linuxcnc.INTERP_IDLE))
    state.set_is_spindle_on(status.spindle_enabled or status.spindle_speed != 0)

def hal_routine(state):
    """HAL routine (for main loop)"""

    # input pins
    state.set_tool_change(h.tool_change == 1, h.number, h.changed == 1)
    state.set_is_touching(h.touchoff == 1)
    # ouput pins
    h.chuck = 1 if state.is_chuck_open else 0
    h.changed = 1 if state.is_changed else 0
    # loop `prepared` to `tool_prepare`
    h.prepared = h.tool_prepare

def gui_routine(state):
    """GUI routine (for main loop)"""

    event, values = window.Read(timeout=10)
    i = None
    if event == 'Load':
        try:
            i = int(values['InputLoad'])
        except ValueError:
            print 'Bad input'

        if i is not None and i > 0:
            state.request_load_tool(i)
    elif event == 'Unload':
        try:
            i = int(values['InputUnload'])
        except ValueError:
            print 'Bad input'

        if i is not None and i > 0:
            state.request_unload_tool(i)

# Initialize state machine
state = StateMachine()

# Create connection to LinuxCNC status channel
status = linuxcnc.stat()

# Main loop
while True:
    status_routine(state, status)
    hal_routine(state)
    gui_routine(state)
